---
title: "Módulo 7: La versatilidad de Quarto"
title-slide-attributes:
  data-background-image: images/icon.png
  data-background-size: contain
  data-background-opacity: "0.2"
author: 
  - name: Mauricio Moreno, PhD
logo: images/icon.png
format: 
  revealjs:
    css: styles.css
    slide-number: true
    width: 1366
    preview-links: auto
    touch: true
    chalkboard:
      theme: whiteboard
      boardmarker-width: 4
      buttons: false
    revealjs-plugins:
      - pointer
---

## Antes de comenzar...{.smaller}

::: incremental

-   En este módulo final, veremos superficialmente el uso de la plataforma Github.

-   El ambiente de Github puede llegar a ser abrumador por la cantidad de opciones y funcionalidades.

-   El objetivo de este curso es que los estudiantes entiendan su funcionamiento más básico en cuanto a su relación con la creación de reportes de Quarto, por lo tanto, entre los diversos temas que no son cubiertos aquí, puedo enlistar los siguientes:

    -   Control de versiones en Github (branches)
    
    -   Manejo de grupos de colaboración
    
    -   Comandos de Git
    
    -   Creación de librerías de R

:::

## Introducción {.smaller}

::: incremental
-   Quarto fue lanzado en el 2022.

-   Como tal, es un software bastante reciente y aún no existen manuales completos acerca de su uso (si has usado `rmarkdown` la curva de aprendizaje es particularmente sencilla).

-   Sin embargo, no es difícil encontrar una considerable cantidad de material creado tanto por POSIT (la empresa responsable de su desarrollo) como por usuarios particulares.

-   En ambos casos, la mejor manera de aprender sus usos (al menos hasta el momento), es explorando el código fuente de documentos disponibles en el internet hechos en Quarto.

-   ¿En donde encontramos estos códigos fuente?

-   **Github**
:::

## Introducción a Github {background-image="images/git.png" background-size="500px"}

## Introducción a Github {visibility="uncounted"}

::: incremental
-   Github es una plataforma para desarrolladores de software que ofrece las funcionalidades de almacenar, manejar y compartir código.

-   Se basa en el uso del software [Git](https://git-scm.com/){target="_blank"}.

-   Instalar Git y configurar su uso con RStudio y una cuenta de Github es un proceso relativamente sencillo. Así que iremos paso por paso.

-   Por el momento cierra RStudio.
:::

## Paso 1: Creando una cuenta de Github {.smaller}

::: incremental
-   Entra a la página web de Github: [https://github.com/](https://github.com/){target="_blank"}

-   Click en *Sign up*:

    -   Ingresamos nuestro correo electrónico

    -   Creamos una contraseña

    -   Creamos un nombre de usuario

-   Luego nos pedirá autentificar nuestra cuenta (resolver un reto).

-   Recibirás un código al correo que utilizaste para verificar tu cuenta.

-   Ya verificada la cuenta, podemos saltarnos la personalización.

-   ¡Listo!


:::


##  {background-image="images/github_page.png" background-size="1800px"}


## Paso 2: Instala Git {.smaller}

::: incremental
-   Entra a la página web de Git: [https://git-scm.com/](https://git-scm.com/){target="_blank"}

-   Click en *Downloads*

-   Escoge tu sistema operativo y tipo de procesador (la última versión de R solo es compatible con computadores 64 bit).

-   Descarga y ejecuta el archivo .exe (Git-2.44.0-64-bit.exe)

-   Sigue el menú de instalación SIN cambiar las opciones predeterminadas
:::

## Paso 3: Verifica que Git se instaló

-   Para verificar, abre Rstudio y sigue *Tools* \> *Global Options* \> *Git/SVN*

![](images/verifica.png){fig-align="center"}

## Paso 3: Verifica que Git se instaló {visibility="uncounted"}

-   Adicionalmente, deberá aparecer en la barra de acciones este ícono:

![](images/git_r.png){fig-align="center"}

-   En caso de que no aparezcan Git ni en las Opciones Globales o en la barra de acciones, desinstala Git y vuélvelo a instalar.

## Paso 4: Pero, ¿funciona?

-   Vamos a clonar un repositorio de Github creando un proyecto

-   Para ello, escogemos la opción de *Version Control*

![](images/paso1.png){fig-align="center"}

## Paso 4: Pero, ¿funciona? {visibility="uncounted"}

-   Escogemos la opción Git

![](images/paso2.png){fig-align="center"}

## Paso 4: Pero, ¿funciona? {visibility="uncounted" .smaller}

-   En el URL vamos a pegar este URL: https://github.com/mmorenozam/plantilla-tesis

-   Escogemos la ubicación en nuestro computador y hacemos click en *Create Project* y ¡listo!

![](images/paso3.png){fig-align="center"}

## Hasta el momento...

::: incremental

-   Hemos (espero) creado exitosamente una cuenta en Github e instalado Git en nuestros computadores.

-   Tenemos la posibilidad de clonar repositorios existentes.

-   Sin embargo, estamos solo a medio camino de explotar un poco más las ventajas de Github (no podemos aún crear, manejar y *empujar* nuestros propios proyectos en Github).

-   Para esto, nos falta vincular nuestra cuenta de Github con RStudio.

-   Sin embargo, haremos una pausa para ver el repositorio que hemos clonado.

:::

## Escribiendo una tesis de grado en Quarto {.smaller}

::: incremental

-   El repositorio que acabamos de clonar, contiene un template para llevar a cabo una tesis de grado.

-   Realicé este template en base de la extensión `quarto-thesis` de autoría de [Eli Holmes](https://github.com/eeholmes){target="_blank"}.

-   Usando este template ya seremos capaces de redactar una tesis con:

    -   los nombres de sección traducidos al español
    
    -   bibliografía en formato APA
    
    -   índice, listas de figuras, listas de tablas, abreviaciones etc, generadas automáticamente en Quarto.

-   Usa las funcionalidades de $\LaTeX{}$ para generar formatos elegantes y agradables a la vista, así como su muy eficiente indexación.

:::

. . .

-   Requisitos:

    -   Quarto version 1.3.450 (Llas más recientes contienen "bugs" que evitan una renderización adecuada).
    
    -   Tinytex
    
    -   (Idealmente) un mínimo conocimiento de edición de texto en $\LaTeX{}$

# ¡Manos a la Obra!

## Vinculando Github con RStudio

::: incremental

-   Retomando, hasta el momento hemos instalado y configurado lo necesario tan solo para clonar repositorios.

-   En el pasado, vincular Github con RStudio requería el ingresar comandos en el Terminal para configurar Git.

-   Afortunadamente, hoy por hoy podemos hacer uso de librerías que nos facilitan el proceso desde la consola de RStudio.

-   Para esto, comenzamos instalando las librerías: `install.packages(c("usethis", "gitcreds", "oskeyring"))`.

:::

## Paso 1: Creando credenciales {.smaller}

::: incremental



-   Ahora, lo primero que haremos es configurar Git para que sepa la cuenta a vincular.

-   Reiniciamos RStudio y pegamos el siguiente comando en la consola:

:::

. . .

```{r echo=T, eval=F}
usethis::use_git_config(user.name = "TuNombreDeUsuario", user.email = "tu@email.com")
```

. . .

::: incremental

-   El siguiente paso es crear un token personal:

:::

. . .

```{r echo=T, eval=F}
usethis::create_github_token() 
```


-   Este comando abrirá una página en tu navegador para que ingreses a Github con la cuenta que creaste



## Paso 1: Vinculando Github con RStudio {visibility="uncounted" .smaller}

-   Una vez que ingreses a tu cuenta, directamente te aparecerá la opción de crear un token:

![](images/git2.png){fig-align="center"}

. . .

-   Puedes escoger el tiempo de expiración del mismo

. . .

-   Click en *Generate token*


## Paso 1: Vinculando Github con RStudio {visibility="uncounted" .smaller}

-   Tu token se mostrará en la pantalla con la opción de copiarlo

![](images/git3.png){fig-align="center"}

. . .

-   Esta es la UNICA vez que tendrás el chance de verlo. 

-   Cópialo por el momento en un block de notas. 

-   Si no lo copias en esta única oportunidad, tendrás que generar otro.

## Paso 2: Creando el vínculo {.smaller}

-   Ahora que tienes tu token a salvo, es momento de vincular RStudio a tu cuenta de Github

```{r echo=T, eval=F}
gitcreds::gitcreds_set() 
```

. . .

-   Si es la primera vez que estás vinculando Github con RStudio, te aparecerá lo siguiente:

![](images/git4.png){fig-align="center"}

-   Pega tu token y enter. 

## Paso 3: Pero, ¿funciona?

-   Reinicia R una vez más y ejecuta en la consola:

```{r echo=T, eval=F}
usethis::gh_token_help()
```

. . .

-   Deberá aparecerte algo similar a esto:

![](images/git5.png){fig-align="center"}

## Empujando nuestro primer repositorio

::: incremental

-   La mejor manera de comprobar que el vínculo/conexión entre tu RStudio y tu cuenta de Github, es "empujando" un repositorio en tu cuenta de Github.

-   En resumen, lo que haremos es crear manualmente un repositorio vacío en Github y luego lo "poblaremos" con un projecto de RStudio (específicamente uno de Quarto).

-   Para esto, puedes utilizar el repositorio con el template de la tesis que anteriormente clonamos (desde el paso 3) o hacerlo siguiendo los pasos desde el principio que mostraré a continuación.

:::

## Paso 1: Creando un repositorio vacío en Github {.smaller}

-   En tu cuenta de Github: Click en la foto de tu avatar > *Your repositories* > *New*. Deberás llegar a una vista como la siguiente:


![](images/repo1.png){fig-align="center"}

## Paso 1: Creando un repositorio vacío en Github {visibility="uncounted" .smaller}


-   Una vez que le hayas dado un nombre a tu nuevo repositorio y dado click en *Create repository*, verás algo como:

![](images/repo2.png){fig-align="center"}

## Paso 2: Creando un proyecto para empujar{.smaller}

-   De vuelta en RStudio, crearemos un proyecto de Quarto

-   Asegúrate que la opción de *Create a git repository* esté marcada

![](images/repo3.png){fig-align="center"}

## Paso 3: Empujando un proyecto a Github por primera vez

::: incremental

-   Una vez creado el proyecto, tenemos dos opciones para empujar nuestro repositorio:
    
    -   Usando únicamente el terminal
    
    -   Usando la GUI de RStudio y el terminal

-   En ambas opciones la lógica es "add/stage" los cambios, "commit", definir el origen y "push" (empujar).

:::

## Paso 3.1: Empujando desde el terminal {.smaller}

-   En el terminal empezaremos ingresando los siguientes comandos

```{r}
#| echo: true
#| eval: false

git add .
git commit -m "un comentario"

```

-   De vuelta en el repositorio vacío que creamos, copia los comandos indicados abajo y pégalos de vuelta en el terminal de R:

![](images/repo4.png){fig-align="center"}

## Paso 3.1: Empujando desde el terminal {visibility="uncounted" .smaller}

-   Si todo salió bien, verás en el terminal algo como:

![](images/repo5.png){fig-align="center"}

## Paso 3.2: Empujando con la GUI y el terminal {.smaller}

-   En la GUI de RStudio, puedes notar que en la ventana del ambiente tienes las siguientes opciones:

![](images/repo7.png){fig-align="center"}

. . .

::: incremental

-   El procedimiento a seguir aquí es: click en *Commit*>Seleccionar todos los archivos en la ventana que se abre>*Stage*>Añadir un comentario>*Commit*.

-   Esto es equivalente a los comandos `git add .` y `git commit -m "un comentario"` que usamos anteriormente.

-   De aquí, copiamos los comandos del repositorio vacío que anteriormente creamos, y los pegamos en la terminal.

:::

## Paso 4: ¡Nuestro repositorio está listo! {.smaller}

-   Cualquiera haya sido tu opción de empujar, una vez que refresques el navegador el repositorio que creaste ya no estará vacío, y verás algo como:

![](images/repo6.png){fig-align="center"}

## Actualizando nuestro repositorio {.smaller}

::: incremental

-   El procedimiento que acabamos de ver es necesario únicamente para la primera vez que empujamos al repositorio.

<!-- -   Cada vez que realices cambios locales (en tu PC), verás como van apareciendo archivos en la ventana de ambiente de Git listos para ser empujados. -->

-   Es decir, ya no necesitamos llevar a cabo la conexión entre nuestro repositorio local y el de Github.

-   Basta entonces usar de aquí en adelante la GUI de RStudio, o comandos en la terminal.

-   Para usar la GUI, al procedimiento anterior, lo terminamos haciendo click en *Push* (en la ventana de ambiente de Git).

-   Para usar la terminal, cada vez que desees actualizar tu repositorio en Github, puedes usar estos comandos directamente en la terminal:

:::

. . .

```{r}
#| echo: true
#| eval: false

git add .
git commit -m "un comentario"
git push

```

## Nuestra primera página web con Quarto

::: incremental

-   Cómo te habrás dado cuenta, lo más difícil hasta el momento ha sido el vincular correctamente Github con RStudio.

-   Una vez que lo hemos hecho, vamos a crear nuestra primera página web usando Quarto.

:::